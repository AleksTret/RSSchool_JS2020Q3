{
  "1": {
    "level": "1",
    "name": "Type Selector",
    "description": "Select elements by their type",
    "title": "Select the plates",
    "syntax": "A",
    "hint": "Selects all elements of type <strong>A</strong>. Type refers to the type of tag, so <tag>div</tag>, <tag>p</tag> and <tag>ul</tag> are all different element types.",
    "examples": [
      "<strong>div</strong> selects all <tag>div</tag> elements.",
      "<strong>p</strong> selects all <tag>p</tag> elements."
    ],
    "markup": [
      {
        "name": "plate",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "true"
      }
    ],
    "answer": [
      "plate"
    ]
  },
  "2": {
    "level": "2",
    "title": "Select the fancy plate",
    "name": "ID Selector",
    "description": "Select elements with an ID",
    "syntax": "#id",
    "hint": "Selects the element with a specific <strong>id</strong>. You can also combine the ID selector with the type selector.",
    "examples": [
      "<strong>#cool</strong> selects any element with <strong>id='cool'</strong>",
      "<strong>ul#long</strong> selects <tag>ul id='long'</tag>"
    ],
    "markup": [
      {
        "name": "plate id='fancy'",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "false"
      }
    ],
    "answer": [
      "#fancy"
    ]
  },
  "3": {
    "level": "3",
    "title": "Select the apple on the plate",
    "name": "Descendant Selector",
    "description": "Select an element inside another element",
    "syntax": "A&nbsp;&nbsp;B",
    "hint": "Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.",
    "examples": [
      "<strong>p&nbsp;&nbsp;strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>",
      "<strong>#fancy&nbsp;&nbsp;span</strong> selects any <tag>span</tag> elements that are inside of the element with <strong>id='fancy'</strong>"
    ],
    "markup": [
      {
        "name": "plate id='fancy'",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "true"
        }
      },
      {
        "name": "apple",
        "animated": "false"
      }
    ],
    "answer": [
      "plate apple"
    ]
  },
  "4": {
    "level": "4",
    "title": "Select the pickle on the fancy plate",
    "name": "Combine selectors",
    "description": "Combine the Descendant & ID Selectors",
    "syntax": "#id&nbsp;&nbsp;A",
    "hint": "You can combine any selector with the descendent selector.",
    "examples": [
      "<strong>#cool&nbsp;span</strong> selects all <tag>span</tag> elements that are inside of elements with <strong>id='cool'</strong>"
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "false"
      },
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "true"
        }
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "false"
        }
      }
    ],
    "answer": [
      "#fancy pickle"
    ]
  },
  "5": {
    "level": "5",
    "title": "Select the small apples",
    "name": "Class Selector",
    "description": "Select elements by their class",
    "syntax": ".classname",
    "hint": "The class selector selects all elements with that class attribute. Elements can only have one ID, but many classes.",
    "examples": [
      "<strong>.neato</strong> selects all elements with <strong>class='neato'</strong>"
    ],
    "markup": [
      {
        "name": "apple",
        "animated": "false"
      },
      {
        "name": "apple class='small'",
        "animated": "true"
      },
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "apple class='small'",
          "animated": "true"
        }
      },
      {
        "name": "bento",
        "animated": "false"
      }
    ],
    "answer": [
      ".small"
    ]
  },
  "6": {
    "level": "6",
    "title": "Select the small oranges",
    "name": "Combine with class selectors",
    "description": "Combine the Class Selector",
    "syntax": "A.className",
    "hint": "You can combine the class selector with other selectors, like the type selector.",
    "examples": [
      "<strong>ul.important</strong> selects all <tag>ul</tag> elements that have <strong>class='important'</strong>",
      "<strong>#big.wide</strong> selects all elements with <strong>id='big'</strong> that also have <strong>class='wide'</strong>"
    ],
    "markup": [
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "orange",
          "animated": "false"
        }
      },
      {
        "name": "orange class='small'",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "orange class='small'",
          "animated": "true"
        }
      },
      {
        "name": "apple class='small'",
        "animated": "false"
      }
    ],
    "answer": [
      "orange.small",
      "orange .small"
    ]
  },
  "7": {
    "level": "7",
    "title": "Select all the plates and bentos",
    "name": "Comma Combinator",
    "description": "Combine, selectors, with... commas!",
    "syntax": "A, B",
    "hint": "Thanks to Shatner technology, this selects all <strong>A</strong> and <strong>B</strong> elements. You can combine any selectors this way, and you can specify more than two.",
    "examples": [
      "<strong>p, .fun</strong> selects all <tag>p</tag> elements as well as all elements with <strong>class='fun'</strong>",
      "<strong>a, p, div</strong> selects all <tag>a</tag>, <tag>p</tag> and <tag>div</tag> elements"
    ],
    "markup": [
      {
        "name": "apple class='small'",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "true",
        "markup": {
          "name": "orange",
          "animated": "false"
        }
      },
      {
        "name": "plate id='fancy'",
        "animated": "true",
        "markup": {
          "name": "pickle",
          "animated": "false"
        }
      },
      {
        "name": "bento",
        "animated": "true"
      }
    ],
    "answer": [
      "plate,bento",
      "plate, bento",
      "plate ,bento",
      "plate , bento",
      "bento,plate",
      "bento, plate",
      "bento ,plate",
      "bento , plate"
    ]
  },
  "8": {
    "level": "8",
    "title": "Select all the things!",
    "name": "The Universal Selector",
    "description": "Select all",
    "syntax": "*",
    "hint": "You can select all elements with the universal selector!",
    "examples": [
      "<strong>p *</strong> selects any element inside all <tag>p</tag> elements."
    ],
    "markup": [
      {
        "name": "apple",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "true",
        "markup": {
          "name": "pickle",
          "animated": "false"
        }
      },
      {
        "name": "plate id='fancy'",
        "animated": "true",
        "markup": {
          "name": "orange id='small'",
          "animated": "false"
        }
      },
      {
        "name": "pickle",
        "animated": "true"
      }
    ],
    "answer": [
      "*"
    ]
  },
  "9": {
    "level": "9",
    "title": "Select everything on the plates",
    "name": "Combine the Universal",
    "description": "Select everything inside of another element",
    "syntax": "A&nbsp;&nbsp;*",
    "hint": "This selects all elements inside of <strong>A</strong>.",
    "examples": [
      "<strong>p *</strong> selects every element inside all <tag>p</tag> elements.",
      "<strong>ul.fancy *</strong> selects every element inside all <tag>ul class='fancy'</tag> elements."
    ],
    "markup": [
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "true"
        }
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "true"
        }
      },
      {
        "name": "apple",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "orange",
          "animated": "true"
        }
      }
    ],
    "answer": [
      "plate *"
    ]
  },  
  "10": {
    "level": "10",
    "title": "Select every pickle that's next to a plate",
    "name": "Adjacent Sibling Selector",
    "description": "Select an element that directly follows another element",
    "syntax": "A + B",
    "hint": "This selects all <strong>B</strong> elements that directly follow <strong>A</strong>. Elements that follow one another are called siblings. They're on the same level, or depth. <br/><br/>In the HTML markup for this level, elements that have the same indentation are siblings.",
    "examples": [
      "<strong>p + .intro</strong> selects every element with <strong>class='intro'</strong> that directly follows a <tag>p</tag>",
      "<strong>div + a</strong> selects every <tag>a</tag> element that directly follows a <tag>div</tag>"
    ],
    "markup": [
      {
        "name": "pickle",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "false"
        }
      },
      {
        "name": "pickle",
        "animated": "true"
      },
      {
        "name": "plate id='fancy'",
        "animated": "false"
      },
      {
        "name": "pickle",
        "animated": "true"
      }
    ],
    "answer": [
      "plate + pickle",
      "plate+pickle",
      "plate +pickle",
      "plate+ pickle"
    ]
  },
  "11": {
    "level": "11",
    "title": "Select the apple beside the orange",
    "name": "General Sibling Selector",
    "description": "Select elements that follows another element",
    "syntax": "A ~ B",
    "hint": "You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.",
    "examples": [
      "<strong>A ~ B</strong> selects all <strong>B</strong> that follow a <strong>A</strong>"
    ],
    "markup": [
      {
        "name": "plate",
        "animated": "false"
      },
      {
        "name": "orange class='small'",
        "animated": "false"
      },
      {
        "name": "apple",
        "animated": "true"
      },
      {
        "name": "apple class='small'",
        "animated": "true"
      },
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "false"
        }
      }
    ],
    "answer": [
      "orange ~ apple",
      "orange~apple",
      "orange ~apple",
      "orange~ apple"
    ]
  },
  "12": {
    "level": "12",
    "title": "Select the orange directly on a bento",
    "name": "Child Selector",
    "description": "Select direct children of an element",
    "syntax": "A > B&nbsp;",
    "hint": "You can select elements that are direct children of other elements. A child element is any element that is nested directly in another element. <br><br>Elements that are nested deeper than that are called descendant elements.",
    "examples": [
      "<strong>A > B</strong> selects all <strong>B</strong> that are a direct children <strong>A</strong>"
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate",
          "animated": "false",
          "markup": {
            "name": "orange class='small'",
            "animated": "false"
          }
        }
      },
      {
        "name": "orange",
        "animated": "false"
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "orange",
          "animated": "true"
        }
      },
      {
        "name": "plate id='fancy'",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "false"
        }
      }
    ],
    "answer": [
      "bento > orange",
      "bento>orange",
      "bento >orange",
      "bento> orange"
    ]
  },
  "13": {
    "level": "13",
    "title": "Select the top plate",
    "name": "First Child Pseudo-selector",
    "description": "Select a first child element inside of another element",
    "syntax": ":first-child",
    "hint": "You can select the first child element. A child element is any element that is directly nested in another element. You can combine this pseudo-selector with other selectors.",
    "examples": [
      "<strong>:first-child</strong> selects all first child elements.",
      "<strong>p:first-child</strong> selects all first child <tag>p</tag> elements.",
      "<strong>div p:first-child</strong> selects all first child <tag>p</tag> elements that are in a <tag>div</tag>."
    ],
    "markup": [
      {
        "name": "apple",
        "animated": "false"
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate",
          "animated": "false",
          "markup": {
            "name": "plate",
            "animated": "false",
            "markup": {
              "name": "plate",
              "animated": "false",
              "markup": {
                "name": "plate",
                "animated": "true"
              }
            }
          }
        }
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "false"
        }
      },
      {
        "name": "orange",
        "animated": "false"
      }
    ],
    "answer": [
      "bento:first-child",
      "bento :first-child"
    ]
  },
  "14": {
    "level": "14",
    "title": "Select the apple and the orange on the plates",
    "name": "Only Child Pseudo-selector",
    "description": "Select an element that are the only element inside of another one.",
    "syntax": ":only-child",
    "hint": "You can select any element that is the only element inside of another one.",
    "examples": [
      "<strong>span:only-child</strong> selects the <tag>span</tag> elements that are the only child of some other element.",
      "<strong>ul li:only-child</strong> selects the only <tag>li</tag> element that are in a <tag>ul</tag>."
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate",
          "animated": "false"
        }
      },
      {
        "name": "plate class='fancy'",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "true"
        }
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate",
          "animated": "false",
          "markup": {
            "name": "orange",
            "animated": "true"
          }
        }
      },
      {
        "name": "pickle",
        "animated": "false"
      }
    ],
    "answer": [
      "plate:only-child",
      "plate :only-child"
    ]
  },
  "15": {
    "level": "15",
    "title": "Select the 3rd plate",
    "name": "Nth Child Pseudo-selector",
    "description": "Select an element by its order in another element",
    "syntax": ":nth-child(N)",
    "hint": "Selects the <strong>nth</strong> (Ex: 1st, 3rd, 12th etc.) child element in another element.",
    "examples": [
      "<strong>:nth-child(8)</strong> selects every element that is the 8th child of another element.",
      "<strong>div p:nth-child(2)</strong> selects the second <strong>p</strong> in every <strong>div</strong>"
    ],
    "markup": [
      {
        "name": "plate class='fancy'",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "false"
      }
    ],
    "answer": [
      ":nth-child(3)"
    ]
  },
  "16": {
    "level": "16",
    "title": "Select all even plate",
    "name": "Nth of Type Selector",
    "description": "Select an element by its order in another element",
    "syntax": ":nth-of-type(A)",
    "hint": "Selects a specific element based on its type and order in another element - or even or odd instances of that element.",
    "examples": [
      "<strong>div:nth-of-type(2)</strong> selects the second instance of a div.",
      "<strong>.example:nth-of-type(odd)</strong> selects all odd instances of a the example class."
    ],
    "markup": [
      {
        "name": "plate class='fancy'",
        "animated": "false"
      },
      {
        "name": "plate",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "false"
      },
      {
        "name": "plate class='fancy'",
        "animated": "true"
      }
    ],
    "answer": [
      "plate:nth-of-type(even)",
      "plate :nth-of-type(even)"
    ]
  },
  "17": {
    "level": "17",
    "title": "Select the empty bentos",
    "name": "Empty Selector",
    "description": "Select elements that don't have children",
    "syntax": ":empty",
    "hint": "Selects elements that don't have any other elements inside of them.",
    "examples": [
      "<strong>div:empty</strong> selects all empty <tag>div</tag> elements."
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "true"
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate class='fancy'",
          "animated": "false"
          }
      },
      {
        "name": "bento",
        "animated": "true"
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "pickle",
          "animated": "false"
          }
      }
    ],
    "answer": [
      "bento:empty",
      "bento :empty"
    ]
  },
  "18": {
    "level": "18",
    "title": "Select the big orange",
    "name": "Negation Pseudo-class",
    "description": "Select all elements that don't match the negation selector",
    "syntax": ":not(X)",
    "hint": "You can use this to select all elements that do not match selector <strong>'X'</strong>.",
    "examples": [
      "<strong>:not(#fancy)</strong> selects all elements that do not have <strong>id='fancy'</strong>.",
      "<strong>div:not(:first-child)</strong> selects every <tag>div</tag> that is not a first child.",
      "<strong>:not(.big, .medium)</strong> selects all elements that do not have <strong>class='big'</strong> or <strong>class='medium'</strong>."
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate class='fancy'",
          "animated": "false",
          "markup": {
            "name": "orange",
            "animated": "true"
          }
        }
      },
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "apple",
          "animated": "false"
        }
      },
      {
        "name": "orange",
        "animated": "true"
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "orange class='small'",
          "animated": "false"
          }
      }
    ],
    "answer": [
      "orange:not(.small)",
      "orange :not(.small)"
    ]
  },
  "19": {
    "level": "19",
    "title": "Select the items for someone",
    "name": "Attribute Selector",
    "description": "Select all elements that have a specific attribute",
    "syntax": "[attribute]",
    "hint": "Attributes appear inside the opening tag of an element, like this: <tag>span attribute='value'</tag>. An attribute does not always have a value, it can be blank!",
    "examples": [
      "<strong>a[href]</strong> selects all <tag>a</tag> elements that have a <strong>href='anything'</strong> attribute.",
      "<strong>[type]</strong> selects all elements that have a <strong>type='anything'</strong>. attribute"
    ],
    "markup": [
      {
        "name": "bento",
        "animated": "false",
        "markup": {
          "name": "plate",
          "animated": "false"
        }
      },
      {
        "name": "plate class='fancy'",
        "animated": "false",
        "markup": {
          "name": "pickle for='Aleks'",
          "animated": "true"
        }
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "orange for='Mickle'",
          "animated": "true"
        }
      }
    ],
    "answer": [
      "[for]"
    ]
  },
  "20": {
    "level": "20",
    "title": "Select the meal for Aleks",
    "name": "Attribute Value Selector",
    "description": "Select all elements that have a specific attribute value",
    "syntax": "[attribute='value']",
    "hint": "Attribute selectors are case sensitive, each character must match exactly.",
    "examples": [
      "<strong>input[type='checkbox']</strong> selects all checkbox input elements."
    ],
    "markup": [
      {
        "name": "orange",
        "animated": "false"
      },
      {
        "name": "plate class='fancy'",
        "animated": "false",
        "markup": {
          "name": "pickle for='Mickle'",
          "animated": "false"
        }
      },
      {
        "name": "plate",
        "animated": "false",
        "markup": {
          "name": "apple for='Aleks'",
          "animated": "true"
        }
      },
      {
        "name": "bento",
        "animated": "false"
      }
    ],
    "answer": [
      "[for=Aleks]",
      "[for = Aleks]",
      "[for =Aleks]",
      "[for= Aleks]"
    ]
  }
}